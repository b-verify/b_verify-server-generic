syntax = "proto3";

package serialization.generated;
import "protos/mpt.proto";
option java_outer_classname = "BVerifyAPIMessageSerialization";


/**
* OVERALL NOTES:
*	-  	we use protobuf for efficient serialization of proofs
*
*/

/**
*	Signed statement for creation of a new log.
*
*	Includes the log creation statement 
* 	and the required signatures.
*
*	ID for the new log is 
*			logID = H(CreateLogStatement)
*/
message SignedCreateLogStatement {
	CreateLogStatement create_log_statement = 1;
	bytes signature = 2;
}


/**
*	Statement for creation of a new log.
*
*	Requires the public keys which must sign any 
*	log statements and an initial statement 
*	(e.g. a name) for the log.
*
*	ID for the new log is
*			 logID = H(CreateLogStatement)
*
*	The initial statement is considered 
*	to be at index 0.
*/
message CreateLogStatement {
	bytes controlling_public_key = 1;
	bytes initial_statement = 2;
}

/**
*	Log Statement.
*
*	Includes the statement, the
*	id of the log to make the statement in and
*	the index of the statement in the log. 
*
*	Statements in the log are indexed 
* 	from 0, with statement 0 being 
* 	the create log statement.
*/
message LogStatement { 
	bytes log_id = 1;
	bytes statment = 2;
	int32 index = 3;
}

/**
*	Signed Log Statement.
*/
message SignedLogStatement {
	LogStatement statement = 1;
	bytes signature = 2;
}

/**
* 	Proof For A Log.
*
*	This is the proof of 
*	non-equivocation for the log.
*/
message LogProof {
	bytes log_id = 1;
	SignedCreateLogStatement create_log_statement = 2;
 	repeated SignedLogStatement signed_statements = 3;
	repeated MerklePrefixTrie proof_of_statements = 4;
}




